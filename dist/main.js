!function(){let t=document.getElementById("playerboard");for(let e=1;e<101;e++){let a=document.createElement("div");a.classList+="gridSpace",a.setAttribute("data-gridID",e),!1===a.hasAttribute("spaceStatus")?a.setAttribute("spaceStatus",""):"miss"===a.getAttribute("spaceStatus")?a.textContent="miss":"hit"===a.getAttribute("spaceStatus")?a.textContent="hit":"ship"===a.getAttribute("spaceStatus")&&(a.style.backgroundColor="grey"),t.appendChild(a)}}(),function(){let t=document.getElementById("cpuboard"),e=1,a=1,s=1;for(let u=1;u<101;u++){let i=document.createElement("div");i.classList+="gridSpace",i.setAttribute("cpudata-gridID",u),!1===i.hasAttribute("cpuspaceStatus")?i.setAttribute("cpuspaceStatus",""):"miss"===i.getAttribute("cpuspaceStatus")?i.textContent="miss":"hit"===i.getAttribute("cpuspaceStatus")&&(i.textContent="hit"),e<11?(i.setAttribute("cpudata-gridX",e),e+=1):(e=1,i.setAttribute("cpudata-gridX",e),e+=1),a<11?(i.setAttribute("cpudata-gridY",s),a+=1):(s+=1,i.setAttribute("cpudata-gridY",s),a=2),t.appendChild(i)}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,