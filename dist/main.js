(()=>{"use strict";const t=(t,e)=>({name:t,cpuAttack:function t(e){let n=Math.floor(100*Math.random()+1);!0===e.isValidAttackSpace(n)?(e.receiveAttack(n),console.log(`${n} has not been fired at`)):(console.log("repeat"),t(e))}});let e=(()=>{let t=[],e=[];for(let e=1;e<101;e++)t[e]="empty";function n(e){return"empty"!==t[e]&&"miss"!==t[e]&&"hit"!==t[e]}return{addShip:function(n,o,r,...i){n=((t,e,...n)=>{let o=0,r=n,i=0;return{hit:function(t){r[r.indexOf(t)]="hit",o+=1},isSunk:function(t){return o===e&&(i+=1,!0)},shipsSunk:i,name:t,hitLocations:r}})(o,r,...i);let l=o,a=i;for(let e=0;e<a.length;e++){let n=a[e];t[n]=`${l}`}e.push(n)},locationArray:t,isValidAttackSpace:function(e){return"miss"!==t[e]&&"hit"!==t[e]},isShip:n,receiveAttack:function(o){if(!0===n(o)){let n=t[o];e.find((({name:t})=>t===n)).hit(o),t[o]="hit"}else t[o]="miss"},allShipsArray:e,checkAllShips:function(){return 5===shipsSunk}}})();e.addShip("destroyer","destroyer",4,6,7,8,9),t("Bryan"),t("Computer"),function(t){let e=document.getElementById("playerboard");for(let n=1;n<101;n++){let o=document.createElement("div");o.classList+="gridSpace",o.setAttribute("data-gridID",n),"hit"===t[n]?(o.textContent="hit",o.style.backgroundColor="green"):"miss"===t[n]?(o.textContent="miss",o.style.backgroundColor="red"):"empty"===t[n]?o.style.backgroundColor="white":o.style.backgroundColor="grey",e.appendChild(o)}}(e.locationArray),function(t){let e=document.getElementById("cpuboard");for(let n=1;n<101;n++){let o=document.createElement("div");o.classList+="gridSpace",o.setAttribute("data-cpugridID",n),"hit"===t[n]?(o.textContent="hit",o.style.backgroundColor="green"):"miss"===t[n]?(o.textContent="miss",o.style.backgroundColor="red"):"empty"===t[n]?o.style.backgroundColor="white":o.style.backgroundColor="grey",e.appendChild(o)}}(e.locationArray),console.table(e.locationArray),console.table(e.allShipsArray)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,