(()=>{"use strict";const t=(t,c)=>({name:t,cpuAttack:function t(c){let a=Math.floor(100*Math.random()+1);!0===c.isValidAttackSpace(a)?(c.receiveAttack(a),console.log(`${a} has not been fired at`)):(console.log("repeat"),t(c))}});let c=(()=>{let t=[],c=[];for(let c=1;c<101;c++)t[c]="empty";function a(c){return"empty"!==t[c]&&"miss"!==t[c]&&"hit"!==t[c]}return{addShip:function(a,e,u,...n){a=((t,c,...a)=>{let e=0,u=a,n=0;return{hit:function(t){u[u.indexOf(t)]="hit",e+=1},isSunk:function(t){return e===c&&(n+=1,!0)},shipsSunk:n,name:t,hitLocations:u}})(e,u,...n);let p=e,i=n;for(let c=0;c<i.length;c++){let a=i[c];t[a]=`${p}`}c.push(a)},locationArray:t,isValidAttackSpace:function(c){return"miss"!==t[c]&&"hit"!==t[c]},isShip:a,receiveAttack:function(e){if(!0===a(e)){let a=t[e];c.find((({name:t})=>t===a)).hit(e),t[e]="hit"}else t[e]="miss"},allShipsArray:c,checkAllShips:function(){return 5===shipsSunk}}})();c.addShip("destroyer","destroyer",4,6,7,8,9),t("Bryan");const a=t("Computer");a.cpuAttack(c),a.cpuAttack(c),a.cpuAttack(c),a.cpuAttack(c),a.cpuAttack(c),a.cpuAttack(c),a.cpuAttack(c),a.cpuAttack(c),a.cpuAttack(c),a.cpuAttack(c),a.cpuAttack(c),a.cpuAttack(c),a.cpuAttack(c),a.cpuAttack(c),a.cpuAttack(c),a.cpuAttack(c),a.cpuAttack(c),a.cpuAttack(c),a.cpuAttack(c),a.cpuAttack(c),a.cpuAttack(c),a.cpuAttack(c),a.cpuAttack(c),a.cpuAttack(c),a.cpuAttack(c),a.cpuAttack(c),a.cpuAttack(c),a.cpuAttack(c),console.table(c.locationArray),console.table(c.allShipsArray)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,