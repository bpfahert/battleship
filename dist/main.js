(()=>{const t=()=>{let t=0,e=[];for(let t=1;t<100;t++)e[t]="empty";return{receiveAttack:function(a,r){return!0===function(t,a){return"ship"===e[10*a+t]}(a,r)&&(hit(ship),t+=1,e[10*r+a]="hit",17===t&&alert("Game Over!"),!0)},isAttacked:function(t){return"miss"===e[t]||"hit"===e[t]}}},e=(t,e)=>({cpuAttack:function t(e){let a=Math.floor(10*Math.random())+1,r=Math.floor(10*Math.random())+1;!1===e.isAttacked()?e.receiveAttack(a,r):t(e)},playerName:t});t();let a=t();e("Bryan"),e("Computer"),function(){let t=document.getElementById("playerboard");for(let e=1;e<101;e++){let a=document.createElement("div");a.classList+="gridSpace",a.setAttribute("data-gridID",e),!1===a.hasAttribute("spaceStatus")?a.setAttribute("spaceStatus",""):"miss"===a.getAttribute("spaceStatus")?a.textContent="miss":"hit"===a.getAttribute("spaceStatus")?a.textContent="hit":"ship"===a.getAttribute("spaceStatus")&&(a.style.backgroundColor="grey"),t.appendChild(a)}}(),function(){let t=document.getElementById("cpuboard"),e=1,r=1,i=1;for(let u=1;u<101;u++){let s=document.createElement("div");s.classList+="gridSpace",s.setAttribute("cpudata-gridID",u),!1===s.hasAttribute("cpuspaceStatus")?s.setAttribute("cpuspaceStatus",""):"miss"===s.getAttribute("cpuspaceStatus")?s.textContent="miss":"hit"===s.getAttribute("cpuspaceStatus")&&(s.textContent="hit"),e<11?(s.setAttribute("cpudata-gridX",e),e+=1):(e=1,s.setAttribute("cpudata-gridX",e),e+=1),r<11?(s.setAttribute("cpudata-gridY",i),r+=1):(i+=1,s.setAttribute("cpudata-gridY",i),r=2),s.addEventListener("click",(()=>{let t=a.receiveAttack(s.getAttribute("cpudata-gridX"),s.getAttribute("cpudata-gridY"));!0===t?(s.setAttribute("cpuspaceStatus","hit"),s.style.backgroundColor="red"):!1===t&&(s.setAttribute("cpuspaceStatus","miss"),s.style.backgroundColor="blue")})),t.appendChild(s)}}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,